'-- LOAD MAP WITH FLR EXTENSION --
SUB LOAD_MAP(MP$)

 LOCAL MX,MY,A$,T,OK,P

 P=26
 
 'RESET RATIOS AND ITENS
 S_FLOOR=0
 T_FLOOR=0
 K_FLOOR=1
 
 S_RATIO=0 
 T_RATIO=0
 K_RATIO=0

 PAGE WRITE 4: CLS

 PAGE WRITE 0

 'GET WALLS LAYER
 'LOAD MAIN FILE
 OPEN "./MAPS/"+MP$+".flr" FOR INPUT AS #1
 FOR MMX=0 TO 127
  PSYCHED_BAR(0.25)
  FOR MMY=0 TO 127
   A$=INPUT$(1,#1)
   IF MMX<64 AND MMY MOD 2=0 THEN
   
    T=ASC(A$): MX=MMX+1: MY=MMY\2+1

    D=0:DV=0:DH=0
    SELECT CASE T
     CASE   1 TO 2: T=T   'GREY BRICK 1,2
     CASE   3: T=4        'GREY BRICK FLAG
     CASE   4: T=5        'GREY BRICK CHANCELER
     CASE   5: T=9        'BLUE BRICK CELL
     CASE   6: T=3        'GREY BRICK EAGLE
     CASE   7: T=10       'BLUE BRICK CELL SKELETON
     CASE   8 TO 9: T=T-1 'BLUE WALLS
     CASE  10: T=12       'WOOD EAGLE
     CASE  11: T=13       'WOOD CHANCELER
     CASE  12: T=11       'WOOD
     CASE  13,15: T=21    'STEEL
     CASE  14: T=22       'STEEL SIGN
     CASE  16: T=48       'LANDSCAPE
     CASE  17: T=23       'RED BRICK
     CASE  18: T=24       'RED BRICK SYMBOL
     CASE  19: T=26       'PURPLE
     CASE  20: T=25       'RED BRICK FLAG
     CASE  21: T=19       'ELEVATOR
     CASE  25: T=27       'PURPLE BLOOD
     CASE  27: T=1        'GREY BRICK 3           ?
     CASE  34,36: T=28    'BLUE WALL SKULL
     CASE  40: T=30       'BLUE WALL
     CASE  90: T=15:    D=64: DV=1 'VERTICAL DOOR
     CASE  91: T=15.25: D=64: DH=2 'HORIZONTAL DOOR
     CASE  92: T=17:    D=64: DV=1 'VERTICAL DOOR - GOLDEN KEY
     CASE  93: T=17.25: D=64: DH=2 'HORIZONTAL DOOR - GOLDEN KEY
     CASE  94: T=17.50: D=64: DV=1 'VERTICAL DOOR - SILVER KEY
     CASE  95: T=17.75: D=64: DH=2 'HORIZONTAL DOOR - SILVER KEY
     CASE 100: T=16:    D=64: DV=1 'ELEVATOR DOOR (VERTICAL)
     CASE 101: T=16.25: D=64: DH=2 'ELEVATOR DOOR (HORIZONTAL)
     CASE ELSE:
      T=0
    END SELECT
    MAPW(MX,MY) = T
    'INSERT PIXEL FOR COLLISION ON THE WALL MAP
    IF T>0 THEN PAGE WRITE 4: PIXEL MX+200,MY+8,RGB(255,255,255): PAGE WRITE 0
    MAPD(MX,MY) = D
    'INSERT PIXEL FOR COLLISION ON THE DOOR MAP
    IF D>0 THEN PAGE WRITE 4: PIXEL MX+200,MY+8,RGB(0,0,255): PAGE WRITE 0
    IF DV>0 THEN MAPS(MX  ,MY-1)=DV: MAPS(MX  ,MY+1)=DV
    IF DH>0 THEN MAPS(MX-1,MY  )=DH: MAPS(MX+1,MY  )=DH
   ENDIF  
 NEXT MMY,MMX

 'INSERT THE ELEVATOR SWITCH (WHY DOES'T HAVE ONE ON THE MAP?)
 FOR MX=0 TO 65
  PSYCHED_BAR(0.17)
  FOR MY=0 TO 65
   'INSERT PIXEL FOR COLLISION ON ALL SIDES OF THE WALL MAP
   IF MX=0 OR MX=65 OR MY=0 OR MY=65 THEN 
    MAPW(MX,MY)=8: PAGE WRITE 4: PIXEL MX+200,MY+8,RGB(255,255,255): PAGE WRITE 0
   ENDIF
   IF MX>0 AND MY>0 AND MX<65 AND MY<65 THEN
    IF MAPW(MX,MY)=19 AND MAPW(MX-1,MY-1)=19 AND MAPW(MX-1,MY+1)=19 THEN MAPW(MX,MY)=18
   ENDIF
   IF MX<65 AND MY>0 AND MY<65 THEN
    IF MAPW(MX,MY)=19 AND MAPW(MX+1,MY-1)=19 AND MAPW(MX+1,MY+1)=19 THEN MAPW(MX,MY)=18
   ENDIF
   IF MY<65 AND MX>0 AND MX<65 THEN
    IF MAPW(MX,MY)=19 AND MAPW(MX-1,MY+1)=19 AND MAPW(MX+1,MY+1)=19 THEN MAPW(MX,MY)=18
   ENDIF
   IF MY>0 AND MX>0 AND MX<65 THEN
    IF MAPW(MX,MY)=19 AND MAPW(MX-1,MY-1)=19 AND MAPW(MX+1,MY-1)=19 THEN MAPW(MX,MY)=18
   ENDIF
 NEXT MY,MX

 'GET PLAYER START POSITION
 SEEK #1,0
 FOR MMX=0 TO 127
  PAGE WRITE 1
  PSYCHED_BAR(0.25)
  FOR MMY=0 TO 127
   A$=INPUT$(1,#1)
   IF MMX>=64 AND MMY MOD 2=0 THEN
    T=ASC(A$): MX=MMX-64+1: MY=MMY\2+1
    SELECT CASE T   
     CASE 19 TO 22:       'START POSITION WITH ANGLE
      STARTX=MX: STARTY=MY
      X_POS=STARTX+0.5: Y_POS=STARTY+0.5
      ANG = RAD((T-20)*90)
      EXIT FOR: EXIT FOR
    END SELECT
   ENDIF
 NEXT MMY,MMX

 'GET OBJECTS LAYER
 MAXENE=-1
 SEEK #1,0
 FOR MMX=0 TO 127
  PAGE WRITE 1
  PSYCHED_BAR(0.25)
  FOR MMY=0 TO 127
   A$=INPUT$(1,#1)
   IF MMX>=64 AND MMY MOD 2=0 THEN
    T=ASC(A$): MX=MMX-64+1: MY=MMY\2+1
    OK=0
    SELECT CASE T
     CASE 19 TO 22: T=0   'ALREADY GET THE X,Y POSITION
     CASE 25: T=2         'TABLE WITH CHAIRS
     CASE 26: T=7         'FLOOR LAMP
     CASE 27: T=10        'CHANDELIER
     CASE 28: T=42        'HANGING SKELETON
     CASE 29: T=20        'DOG FOOD
     CASE 30: T=3         'WHITE COLUMN
     CASE 31: T=6         'GREEN PLANT
     CASE 32: T=35        'SKELETON
     CASE 33: T=17        'SINK
     CASE 34,35: T=9      'BROWN PLANT / VASE*
     CASE 36,68: T=28     'TABLE / STOVE*
     CASE 37: T=11        'CEILING LIGHT (GREEN)
     CASE 38,67: T=24     'UTENSILS BROWN / UTENSILS BLUE*
     CASE 39: T=4         'ARMOR
     CASE 40: T=38        'EMPTY CAGE
     CASE 41: T=41        'CAGE / SKELETON
     CASE 42: T=36        'BONES 1
     CASE 43: T=21        'GOLDEN KEY
     CASE 44: T=18        'BLUE KEY
     CASE 45: T=30        'BED
     CASE 47: T=23        'FOOD
     CASE 48: T=26        'MEDKIT
     CASE 49: T=16        'AMMO
     CASE 50: T=19        'SMALL GUN
     CASE 51: T=22        'MACHINE GUN
     CASE 52:
      T=14: T_RATIO=T_RATIO+1 'CROSS
     CASE 53:
      T=13: T_RATIO=T_RATIO+1 'CHALIACE
     CASE 54:
      T=12: T_RATIO=T_RATIO+1 'CHEST
     CASE 55:
      T=15: T_RATIO=T_RATIO+1 'CROWN
     CASE 56:
      T=25: S_RATIO=S_RATIO+1 'EXTRA LIFE
     CASE 57: T=37        'BONES / BLOOD
     CASE 58: T=5         'BARREL
     CASE 59,60: T=8      'WELL* / WELL WATER
     CASE 61,23: T=38     'POOL OF BLOOD / WATER*
     CASE 62,63: T=29     'FLAG / AARDWOLF SIGN*
     CASE 64,65,66: T=37  'BONES 2,3,4
     CASE 69: T=27        'RACK
     CASE 70: T=39        'VINES
     CASE 98:
      T=-1: OK=0: S_RATIO=S_RATIO+1
      MAPS(MX,MY)=-1
      MAPD(MX,MY)=-64     'SECRET DOOR
     CASE 99:  T=57       'ENDGAME TRIGGER
     CASE 124: T=31       'DEAD BROWN GUARD    

     'PUT ENEMIES ACCORDLY THE DIFFICULT

     ' BROWN GUARD
     ' STOPPED / MOVING (IMPLEMENT THIS!)
     CASE 108 TO 111, 112 TO 115: IF TOUGH >= 1 THEN OK=1 ELSE T=0 'BABY
     CASE 144 TO 147, 148 TO 151: IF TOUGH >= 2 THEN OK=1 ELSE T=0 'EASY / NORMAL
     CASE 180 TO 183, 184 TO 187: IF TOUGH >= 4 THEN OK=1 ELSE T=0 'HARD     

     ' SS
     ' STOPPED / MOVING (IMPLEMENT THIS!)
     CASE 126 TO 129, 130 TO 133: IF TOUGH >= 1 THEN OK=2 ELSE T=0 'BABY
     CASE 162 TO 165, 166 TO 169: IF TOUGH >= 2 THEN OK=2 ELSE T=0 'EASY / NORMAL
     CASE 198 TO 201, 202 TO 205: IF TOUGH >= 4 THEN OK=2 ELSE T=0 'HARD     
 
     ' DOG
     ' MOVING (IMPLEMENT THIS!)
     CASE 138 TO 141: IF TOUGH >= 1 THEN OK=3 ELSE T=0 'BABY
     CASE 174 TO 177: IF TOUGH >= 2 THEN OK=3 ELSE T=0 'EASY / NORMAL
     CASE 210 TO 213: IF TOUGH >= 4 THEN OK=3 ELSE T=0 'HARD     

     ' OFFICER
     ' STOPPED / MOVING (IMPLEMENT THIS!)
     CASE 116 TO 119, 120 TO 123: IF TOUGH >= 1 THEN OK=4 ELSE T=0 'BABY
     CASE 152 TO 155, 156 TO 159: IF TOUGH >= 2 THEN OK=4 ELSE T=0 'EASY / NORMAL
     CASE 188 TO 191, 192 TO 195: IF TOUGH >= 4 THEN OK=4 ELSE T=0 'HARD     

     ' BOSS 1 - HANS GROSSE  
     CASE 214: OK=11: MAPW(MX,MY)=0
 
     CASE ELSE:
      T=0: OK=0
    END SELECT

    'IT'S AN ENEMY?
    IF OK>0 THEN
     T=999+OK
     MAXENE=MAXENE+1
     ACT_OBJ(MAXENE)=0
     ANI_OBJ(MAXENE)=0
     K_RATIO=K_RATIO+1
     'ENEMY'S ENERGY
     SELECT CASE OK
      CASE  1: ENE_OBJ(MAXENE)=5+TOUGH*5      'BROWN GUARD
      CASE  2: ENE_OBJ(MAXENE)=35+TOUGH*15    'SS
      CASE  3: ENE_OBJ(MAXENE)=5+TOUGH*5      'DOG
      CASE  4: ENE_OBJ(MAXENE)=30+TOUGH*10    'OFFICER
      CASE 11: ENE_OBJ(MAXENE)=400+TOUGH*100  'BOSS 1
     END SELECT
     X_OBJ(MAXENE)=MX+0.5
     Y_OBJ(MAXENE)=MY+0.5
     T_OBJ(MAXENE)=T
     MAPO(MX,MY)=0
    ENDIF

    'IT'S AN OBJECT?
    IF T<1000 THEN
     MAPO(MX,MY)=T               'MARK ON THE OBJECT MAP
     IF T>0 THEN MAPW(MX,MY)=500 'MARK ON THE WALL MAP TO SPEED UP RAYCAST
    ENDIF

    'AMMO USE DOOR LAYER TO COUNT IT
    IF T=16 THEN MAPD(MX,MY)=-8   
   ENDIF
 NEXT MMY,MMX

 CLOSE #1

END SUB

